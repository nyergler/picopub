// generated by jsonenums -type=PostType; DO NOT EDIT

package picopub

import (
	"encoding/json"
	"fmt"
)

var (
	_PostTypeNameToValue = map[string]PostType{
		"Unknown": Unknown,
		"Entry":   Entry,
		"Read":    Read,
		"Like":    Like,
	}

	_PostTypeValueToName = map[PostType]string{
		Unknown: "Unknown",
		Entry:   "Entry",
		Read:    "Read",
		Like:    "Like",
	}
)

func init() {
	var v PostType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PostTypeNameToValue = map[string]PostType{
			interface{}(Unknown).(fmt.Stringer).String(): Unknown,
			interface{}(Entry).(fmt.Stringer).String():   Entry,
			interface{}(Read).(fmt.Stringer).String():    Read,
			interface{}(Like).(fmt.Stringer).String():    Like,
		}
	}
}

// MarshalJSON is generated so PostType satisfies json.Marshaler.
func (r PostType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PostTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid PostType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PostType satisfies json.Unmarshaler.
func (r *PostType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PostType should be a string, got %s", data)
	}
	v, ok := _PostTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid PostType %q", s)
	}
	*r = v
	return nil
}
